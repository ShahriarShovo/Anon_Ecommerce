# Generated by Django 4.2.4 on 2025-09-15 16:00

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

class Migration(migrations.Migration):

    dependencies = [
        ('products', '0002_alter_category_options_alter_subcategory_options'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Product title', max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of title', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Product description', null=True)),
                ('short_description', models.TextField(blank=True, help_text='Brief product description', max_length=500, null=True)),
                ('meta_title', models.CharField(blank=True, help_text='SEO meta title', max_length=255, null=True)),
                ('meta_description', models.TextField(blank=True, help_text='SEO meta description', null=True)),
                ('product_type', models.CharField(default='simple', help_text='Product type (simple, variable, etc.)', max_length=100)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('archived', 'Archived')], default='draft', help_text='Product status', max_length=20)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Product price', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('compare_at_price', models.DecimalField(blank=True, decimal_places=2, help_text='Compare at price (original price)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost_per_item', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per item', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('track_quantity', models.BooleanField(default=True, help_text='Track inventory for this product')),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Available quantity')),
                ('allow_backorder', models.BooleanField(default=False, help_text='Allow backorder when out of stock')),
                ('quantity_policy', models.CharField(choices=[('deny', 'Deny'), ('continue', 'Continue')], default='deny', help_text='What to do when quantity is 0', max_length=20)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Product weight', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('weight_unit', models.CharField(choices=[('kg', 'Kilogram'), ('lb', 'Pound'), ('g', 'Gram'), ('oz', 'Ounce')], default='kg', help_text='Weight unit', max_length=10)),
                ('requires_shipping', models.BooleanField(default=True, help_text='This product requires shipping')),
                ('taxable', models.BooleanField(default=True, help_text='This product is taxable')),
                ('featured', models.BooleanField(default=False, help_text='Feature this product')),
                ('tags', models.TextField(blank=True, help_text='Product tags (comma-separated)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, help_text='When product was published', null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.category')),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.subcategory')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Variant title (e.g., 'Small - Red')", max_length=255)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit', max_length=100, null=True, unique=True)),
                ('barcode', models.CharField(blank=True, help_text='Product barcode', max_length=100, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Variant price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('compare_at_price', models.DecimalField(blank=True, decimal_places=2, help_text='Compare at price (original price)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost_per_item', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per item', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Available quantity')),
                ('track_quantity', models.BooleanField(default=True, help_text='Track inventory for this variant')),
                ('allow_backorder', models.BooleanField(default=False, help_text='Allow backorder when out of stock')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Variant weight', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('weight_unit', models.CharField(choices=[('kg', 'Kilogram'), ('lb', 'Pound'), ('g', 'Gram'), ('oz', 'Ounce')], default='kg', help_text='Weight unit', max_length=10)),
                ('option1_name', models.CharField(blank=True, help_text="Option 1 name (e.g., 'Size')", max_length=100, null=True)),
                ('option1_value', models.CharField(blank=True, help_text="Option 1 value (e.g., 'Small')", max_length=100, null=True)),
                ('option2_name', models.CharField(blank=True, help_text="Option 2 name (e.g., 'Color')", max_length=100, null=True)),
                ('option2_value', models.CharField(blank=True, help_text="Option 2 value (e.g., 'Red')", max_length=100, null=True)),
                ('option3_name', models.CharField(blank=True, help_text="Option 3 name (e.g., 'Material')", max_length=100, null=True)),
                ('option3_value', models.CharField(blank=True, help_text="Option 3 value (e.g., 'Cotton')", max_length=100, null=True)),
                ('position', models.PositiveIntegerField(default=1, help_text='Display position')),
                ('is_active', models.BooleanField(default=True, help_text='Is this variant active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Variant',
                'verbose_name_plural': 'Product Variants',
                'ordering': ['position', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Product image', upload_to='products/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp'])])),
                ('alt_text', models.CharField(blank=True, help_text='Alt text for accessibility', max_length=255, null=True)),
                ('caption', models.CharField(blank=True, help_text='Image caption', max_length=255, null=True)),
                ('position', models.PositiveIntegerField(default=1, help_text='Display position')),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary image?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.productvariant')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['position', 'id'],
            },
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product'], name='products_pr_product_cee51f_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku'], name='products_pr_sku_dcab68_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_active'], name='products_pr_is_acti_9d6315_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('product', 'option1_value', 'option2_value', 'option3_value')},
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product'], name='products_pr_product_3d7874_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['variant'], name='products_pr_variant_4f60d9_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_primary'], name='products_pr_is_prim_b891de_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status'], name='products_pr_status_041708_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='products_pr_categor_9edb3d_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at'], name='products_pr_created_52f0d7_idx'),
        ),
    ]
